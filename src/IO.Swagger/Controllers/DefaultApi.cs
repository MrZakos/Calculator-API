/*
 * Sample Access Code Flow OAuth2 Project
 *
 * This is an example of using OAuth2 Access Code Flow in a specification to describe security to your API.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using IO.Swagger.Models;
using IO.Swagger.Models.Core;
using IO.Swagger.Models.Math;
using IO.Swagger.Services.Math;
using Microsoft.Extensions.Logging;

namespace IO.Swagger.Controllers {
	/// <summary>
	/// Math API Controller
	/// </summary>
	[ApiController]
	[Authorize] // Require JWT Bearer authentication for all endpoints
	public sealed class DefaultApiController(IMathWorkflow mathWorkflow,ILogger<DefaultApiController> logger) : ControllerBase {

		/// <summary>
		/// Perform mathematical operations
		/// </summary>
		/// <remarks>This API allows users to perform various mathematical operations with JWT authentication.</remarks>
		/// <param name="request">Mathematical operation containing operands and operation type</param>
		/// <param name="xArithmeticOpId"></param>
		/// <response code="200">Successful operation</response>
		/// <response code="400">Invalid input</response>
		/// <response code="401">Unauthorized - Invalid or missing JWT token</response>
		[HttpPost]
		[Route("/api/math")]
		[SwaggerOperation("MathPost")]
		[SwaggerResponse(statusCode:200,type:typeof(MathResponse),description:"Successful operation")]
		[SwaggerResponse(statusCode:400,type:typeof(BaseResponse),description:"Bad Request")]
		[SwaggerResponse(statusCode:401,description:"Unauthorized - Invalid or missing JWT token")]
		[SwaggerResponse(statusCode:500,description:"Server error while processing the request")]
		[Produces("application/json")]
		public async Task<IActionResult> MathPost([FromBody] MathRequest request,[FromHeader(Name = "X-ArithmeticOp-ID")] [Required] string xArithmeticOpId) {
			try {
				logger.LogInformation("MathPost endpoint called with operation ID: {OperationId}",xArithmeticOpId);
				
				var result = await mathWorkflow.ExecuteMathWorkflowAsync(request,xArithmeticOpId);
				
				if (result.Success == true) {
					logger.LogInformation("MathPost completed successfully for operation ID: {OperationId}",xArithmeticOpId);
					return Ok(result);
				}
				
				logger.LogWarning("MathPost failed for operation ID: {OperationId}. Error: {Error}",xArithmeticOpId,result.Error);
				return BadRequest(result);
			}
			catch (Exception ex) {
				logger.LogError(ex,"Unexpected error in MathPost for operation ID: {OperationId}",xArithmeticOpId);
				return StatusCode(500, $"Error performing calculation: {ex.Message}");
			}
		}
	}
}
