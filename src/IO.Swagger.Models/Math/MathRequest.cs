/*
 * Calculator API
 *
 * API for performing arithmetic operations
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace IO.Swagger.Models.Math {
	/// <summary>
	///  MathRequest class represents a request for performing a mathematical operation.
	///  It contains the operands (X and Y) and the operation type (Addition, Subtraction, Multiplication, or Division).
	///  The class implements IEquatable for equality comparison and provides methods for string representation and JSON serialization.
	///  The properties X and Y are required and must be decimal values, while the Operation property is of type MathOperationType,
	/// </summary>
	[DataContract]
	public partial class MathRequest : IEquatable<MathRequest> {
		/// <summary>
		/// Gets or Sets X
		/// </summary>
		[Required]
		[DataMember(Name="x")]
		public double? X { get; set; }

		/// <summary>
		/// Gets or Sets Y
		/// </summary>
		[Required]
		[DataMember(Name="y")]
		public double? Y { get; set; }

		/// <summary>
		/// Gets or Sets Operation
		/// </summary>
		[Required]
		[DataMember(Name="operation")]
		public MathOperationType? Operation { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			var sb = new StringBuilder();
			sb.Append("class MathRequest {\n");
			sb.Append("  X: ").Append(X).Append("\n");
			sb.Append("  Y: ").Append(Y).Append("\n");
			sb.Append("  Operation: ").Append(Operation).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() {
			return JsonSerializer.Serialize(this,
											new JsonSerializerOptions {
												WriteIndented = true
											});
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (ReferenceEquals(null,obj))
				return false;
			if (ReferenceEquals(this,obj))
				return true;
			return obj.GetType() == GetType() && Equals((MathRequest)obj);
		}

		/// <summary>
		/// Returns true if MathRequest instances are equal
		/// </summary>
		/// <param name="other">Instance of MathRequest to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(MathRequest other) {
			if (ReferenceEquals(null,other))
				return false;
			if (ReferenceEquals(this,other))
				return true;
			return (X == other.X || X != null && X.Equals(other.X)) && (Y == other.Y || Y != null && Y.Equals(other.Y)) && (Operation == other.Operation || Operation != null && Operation.Equals(other.Operation));
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (X != null)
					hashCode = hashCode * 59 + X.GetHashCode();
				if (Y != null)
					hashCode = hashCode * 59 + Y.GetHashCode();
				if (Operation != null)
					hashCode = hashCode * 59 + Operation.GetHashCode();
				return hashCode;
			}
		}

#region Operators
#pragma warning disable 1591

		public static bool operator==(MathRequest left,MathRequest right) {
			return Equals(left,right);
		}

		public static bool operator!=(MathRequest left,MathRequest right) {
			return !Equals(left,right);
		}

#pragma warning restore 1591
#endregion Operators

	}
}
